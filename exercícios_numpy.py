# -*- coding: utf-8 -*-
"""Exerc√≠cios Numpy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZBa9ZTePLRfZ6tsRIowmWvNBNqh-PXHj
"""

import numpy as np

vetor_pares = np.arange(2, 21, 2)

print(vetor_pares)

#Crie uma matriz numpy 3x3 com valores aleat√≥rios entre 0 e 10. Dica: use np.random.rand()
#Separa√ß√£o ou Divis√£o de Arrays Numpy
import numpy as np
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
newarr = arr.reshape(3, 3)
print('arr: ')
print(arr)
print('Newarr: ')
print(newarr)

import numpy as np

matriz = np.random.rand(3, 3)* 10

print(matriz)

"""3. Multiplique todos os elementos de um vetor por 2. Use broadcasting para evitar loop.
Exemplo: Seja `vetor = np.array([1, 2, 3, 4])`. O resultado esperado: `array([2, 4, 6, 8])`
"""

import numpy as np

vetor = np.array([1, 2, 3, 4])
resultado = vetor * 2

print(resultado)

"""4. Calcule a soma cumulativa de um vetor. Dica: usar np.cumsum()
Exemplo: Seja `vetor = np.array([1, 2, 3, 4])`, o resultado seria `array([ 1, 3, 6, 10])`

"""

import numpy as np

vetor = np.array([1, 2, 3, 4])

soma_cumulativa = np.cumsum(vetor)

print(soma_cumulativa)

"""5. Transponha uma matriz.
Exemplo: Seja `matriz = np.array([[1, 2], [3, 4], [5, 6]])`, o resultado seria `array([[1, 3,
5], [2, 4, 6]])`

"""

import numpy as np

matriz = np.array([[1, 2], [3, 4], [5, 6]])
transp = matriz.T
print(transp)

"""6. Converta uma matriz em um vetor unidimensional.
Exemplo: Seja `matriz = np.array([[1, 2, 3], [4, 5, 6]])`, o resultado seria `array([1, 2, 3,
4, 5, 6])`

"""

matriz = np.array([[1, 2, 3], [4, 5, 6]])
vetor_unidimensional = np.ravel(matriz)
print(vetor_unidimensional)

"""7 .Multiplica√ß√£o matricial: multiplique uma matriz (ùëö √ó ùëõ) por um vetor (ùëõ √ó 1).
Exemplo: Seja `matriz = np.array([[1, 2], [3, 4]])` e `vetor = np.array([[5], [6]])`, o
resultado seria `array([[17], [39]])`

"""

import numpy as np


matriz = np.array([[1, 2], [3, 4]])
vetor = np.array([[5], [6]])

resultado = np.dot(matriz, vetor)  # ou np.dot(matriz, vetor)

print(resultado)

"""8 .Encontre os √≠ndices dos valores m√°ximos em cada linha de uma matriz. Dica: use
np.argmax(). Exemplo: Seja `matriz = np.array([[1, 9, 6], [8, 2, 3], [4, 7, 5]])`, o resultado
seria `array([1, 0, 1])`

"""

matriz = np.array([[1, 9, 6], [8, 2, 3], [4, 7, 5]])

indices_maximos = np.argmax(matriz, axis=1)

print(indices_maximos)

"""9 . Calcule a raiz quadrada de todos os elementos de um vetor.
Exemplo: Seja `vetor = np.array([4, 9, 16, 25])`, o resultado seria `array([2., 3., 4., 5.])`
"""

vetor = np.array([4, 9, 16, 25])

raiz_quadrada = np.sqrt(vetor)

print(raiz_quadrada)

"""10.Substitua todos os valores negativos em um vetor por 0. Exemplo: Seja `vetor =
np.array([-1, 2, -3, 4, -5])`, o resultado seria `array([0, 2, 0, 4, 0])`
"""

vetor = np.array([-1, 2, -3, 4, -5])
vetor[vetor < 0] = 0
print(vetor)

"""11. Reshape um vetor unidimensional em uma matriz 3x3. Exemplo: Seja `vetor =
np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])`, o resultado seria `array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])`
"""

vetor = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])

matriz_3x3 = vetor.reshape(3, 3)

print(matriz_3x3)

"""
12 . Adicione um valor constante a todos os elementos de um vetor.
Exemplo: Seja `vetor = np.array([1, 2, 3, 4])` e `constante = 5`, o resultado seria
`array([6, 7, 8, 9])`

---

"""

vetor = np.array([1, 2, 3, 4])
constante = 5

vetor_resultante = vetor + constante

print(vetor_resultante)

"""13. Determine uma constante que ao multiplicar todos os elementos de uma matriz por
essa constante, a soma dos elementos da matriz resultante ser√° 1. N√£o usar loops.
Exemplo: Seja `matriz = np.array([[1, 2], [3, 4]])`, o resultado seria `array([[0.1, 0.2], [0.3,
0.4]])`, pois 0.1+0.2+0.3+0.4 = 1.
"""

import numpy as np
def encontrar_constante(matriz):
  soma = np.sum(matriz)
  consta = 1 / soma
  return consta

matriz = np.array([[1, 2], [3, 4]])
consta = encontrar_constante(matriz)
res = matriz * consta
print(res)





"""14 . Gere uma matriz identidade 3x3. Dica: use np.eye()"""

matriz = np.array()
print(matriz)

"""15. Concatene duas matrizes horizontalmente. Dica: use np.hstack()
Exemplo:
"""

import numpy as np


matriz1 = np.array([[1, 2, 3],
                     [4, 5, 6]])

matriz2 = np.array([[7, 8, 9],
                     [10, 11, 12]])


matriz_concatenada = np.hstack((matriz1, matriz2))

print(matriz_concatenada)

"""16 .Encontre o produto escalar entre os vetores [1, 2, 3] e [4, 5, 6]. Dica: use np.dot() e
tamb√©m o operador @ para conferir o outro resultado
"""

import numpy as np

vetor1 = np.array([1, 2, 3])
vetor2 = np.array([4, 5, 6])

matriz_dot = np.dot(vetor1, vetor2)

produto_escalar = vetor1 @ vetor2

print(produto_escalar)
print()
print(matriz_dot)

"""17. Calcule a m√©dia e o desvio padr√£o de cada linha de uma matriz. Dica: use np.mean() e
np.std(). Exemplo: `matriz = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])`. O resultado deve ser:
m√©dia por linha: [2. 5. 8.], desvio padr√£o por linha: [0.8165, 0.8165, 0.8165]
"""

matriz = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

media_por_linha = np.mean(matriz, axis=1)

desvio_padrao_por_linha = np.std(matriz, axis=1)

print("M√©dia por linha:", media_por_linha)
print("Desvio padr√£o por linha:", desvio_padrao_por_linha)

"""18. Calcule a m√©dia e o desvio padr√£o de cada coluna de uma matriz. Dica: use np.mean()
e np.std(). Exemplo: matriz = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]). O resultado deve ser:
m√©dia por coluna: [4. 5. 6.], desvio padr√£o por coluna: [2.4495, 2.4495, 2.4495]
"""

matriz = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

media_por_coluna = np.mean(matriz, axis=0)

desvio_padrao_por_coluna = np.std(matriz, axis=0)

print("M√©dia por coluna:", media_por_coluna)
print("Desvio padr√£o por coluna:", desvio_padrao_por_coluna)

"""19. Calcule a m√©dia de cada coluna de uma matriz e a subtraia da respectiva coluna.
Exemplo: Seja `matriz = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])`, o resultado seria
`array([[-3., -3., -3.], [ 0., 0., 0.], [ 3., 3., 3.]])`. Use broadcasting para evitar loops
"""

matriz = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

media_por_coluna = np.mean(matriz, axis=0)

matriz_resultante = matriz - media_por_coluna

print(matriz_resultante)

"""20. Calcule a m√©dia de cada linha de uma matriz e a subtraia da respectiva linha. Exemplo:
Seja `matriz = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])`, o resultado seria `array([[-1., 0., 1.],
[-1., 0., 1.], [-1., 0., 1.]])`. Use broadcasting para evitar loops
"""

import numpy as np

matriz = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

media_por_linha = np.mean(matriz, axis=1)

matriz_resultante = matriz - media_por_linha[:, np.newaxis]

print(matriz_resultante)